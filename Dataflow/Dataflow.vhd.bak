library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Dataflow is
    port (
        IR_E,C_FLAG_E,Z_FLAG_E,PC_E,RF_WE3,RF_RE1,MEM_WE,MEM_RE,T_E,RF_RE2: in std_logic;
        MUX_RF_A1, MUX_RF_A2, MUX_RF_A3, MUX_RF_D2, MUX_ALU_A,MUX_T_IN,MUX_T_OUT,MUX_MEM_OUT: in std_logic;
		MUX_RF_D1: in std_logic_vector(2 downto 0);
		MUX_RF_D3, MUX_ALU_B,MUX_ALU_C, MUX_MEM_IN: in std_logic_vector(1 downto 0);
        CLK : in std_logic;
        Carry_OUT, Zero_OUT : out std_logic;
        IR_OUT : out std_logic_vector(15 downto 0)
    );
end entity Dataflow;

architecture Dataflow_Arch of Dataflow is
    component Register_1 is 
		port(
            DIN, DOUT : in std_logic;
            CLK, WE : in std_logic
		);
	end component;

    component Register_16 is 
		port(
            DIN, DOUT : in std_logic_vector(15 downto 0);
            CLK, WE : in std_logic
		);
	end component;

    component Register_File is
        port( RF_A1, RF_A2, RF_A3 : in std_logic_vector(2 downto 0); RF_D1, RF_D2 : out std_logic_vector(15 downto 0); 
                RF_D3 : in std_logic_vector(15 downto 0) ; RF_RE1, RF_RE2, RF_WR3: in std_logic; clk : in std_logic);  
    end component;

    -- memory

    -- muxes

    component ALU is
        port (ALU_A , ALU_B : in std_logic_vector(15 downto 0); ALU_S : in std_logic_vector(3 downto 0); ALU_C : out std_logic_vector(15 downto 0); 
        ALU_Carry, ALU_Zero : out std_logic);
    end component;

    component Incrementer is
		port (
			PC_in,  IR : in std_logic_vector( 15 downto 0);
            Z,WE : in std_logic;
            clk : in std_logic;
            PC_out : out std_logic_vector(15 downto 0)
		);
	end component;
    
    -- sign extenders

    -- bit shifters

begin

    --IR
    IR : Register_16 port map(DIN =>  DOUT : in std_logic_vector(15 downto 0);
    CLK, WE : in std_logic);
end architecture Dataflow_Arch;